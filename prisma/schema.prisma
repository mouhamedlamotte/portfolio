generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique @default(cuid()) @db.VarChar(30)
  name      String   @db.VarChar(150)
  email     String   @unique @db.VarChar(150)
  password  String?  @db.VarChar(200)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Visit {
  id           String            @id @default(uuid())
  ipAddress    String?
  country      String?
  region       String?
  deviceType   String?
  os           String?
  browser      String?
  language     String?
  referrer     String?
  visitDate    DateTime          @default(now())
  isBot        Boolean           @default(false)
  dateID       String
  source       String?

  interactions PageInteraction[]
  VisitedPages VisitedPage[]
  Downloads Downloads[]
  Devis Devis[]
  
  GamePlay GamePlay[]
  Messages Messages[]
  @@index([ipAddress, visitDate])
  @@unique([ipAddress, dateID])
}
model VisitedPage {
  id        String   @id @default(uuid())
  visit     Visit    @relation(fields: [visitId], references: [id], onDelete: Cascade)
  visitId   String
  url      String
  visitDate DateTime @default(now())
  
  @@unique([visitId, url])
}

model PageInteraction {
  id            String   @id @default(uuid())
  visitId       String
  visit         Visit    @relation(fields: [visitId], references: [id])
  actionType    String
  targetElement String?
  timestamp     DateTime @default(now())

  @@unique([visitId, actionType, targetElement])
  @@index([actionType, timestamp])
}

model Messages {
  id        String   @id @default(uuid())
  name      String
  email     String
  message   String
  read      Boolean  @default(false)
  replied   Boolean  @default(false)
  createdAt DateTime @default(now())
  Contact   Contact  @relation(fields: [contactId], references: [id])
  contactId String
  emailSent Boolean  @default(false)
  unsentReason String?
  Replies Replies[]
  visit       Visit?   @relation(fields: [visitId], references: [id], onDelete: Cascade)
  visitId     String?
}

enum ReplyVia {
  GMAIL
  ADMIN
}

model Replies {
  id        String   @id @default(uuid())
  content   String   @db.Text()
  via       ReplyVia @default(ADMIN)
  createdAt DateTime @default(now())
  Message   Messages @relation(fields: [messageId], references: [id])
  messageId String
}

model Contact {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  createdAt DateTime   @default(now())
  messages  Messages[]
}

enum Winner {
  USER
  COMPUTER
}

enum Level {
  EASY
  MEDIUM
  HARD
}

model Game {
  id          String     @id @default(uuid())
  name        String
  description String?
  image       String?
  createdAt   DateTime   @default(now())
  plays       Int        @default(0)
  GamePlay    GamePlay[]
}

model GamePlay {
  id        String   @id @default(uuid())
  level     Level
  winner    Winner?
  time      Int?
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String
  createdAt DateTime @default(now())
  image     String?
  pattern   String?
  visit       Visit?   @relation(fields: [visitId], references: [id], onDelete: Cascade)
  visitId     String?
}

model Devis {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  email       String   @db.VarChar(255)
  company     String?  @db.VarChar(255)
  phone       String?  @db.VarChar(20)
  projectType String   @db.VarChar(255)
  budget      String?  @db.VarChar(255)
  description String   @db.Text
  file        String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  visit       Visit?   @relation(fields: [visitId], references: [id], onDelete: Cascade)
  visitId     String?
}


model Downloads {
  id        String   @id @default(uuid())
  downloadedItem String
  visit     Visit?    @relation(fields: [visitId], references: [id], onDelete: Cascade)
  visitId   String?
  createdAt DateTime @default(now())
}
